/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/
/* The following code was generated by JFlex 1.3.5 on 3/5/07 12:15 PM */

package org.eclipse.php.internal.core.phpModel.parser.phpdoc;

import java.io.IOException;
import java.util.ArrayList;

import org.eclipse.php.internal.core.phpModel.phpElementData.BasicPHPDocTag;
import org.eclipse.php.internal.core.phpModel.phpElementData.PHPDocBlock;
import org.eclipse.php.internal.core.phpModel.phpElementData.PHPDocBlockImp;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 3/5/07 12:15 PM from the specification file
 * <tt>file:/C:/Java/Projects/parserUtils/parser/phpdoc/documentor_scanner.flex</tt>
 */
@SuppressWarnings({"unchecked", "nls"})
public class DocumentorLexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int ST_IN_TAGS = 6;
  final public static int YYINITIAL = 0;
  final public static int ST_IN_SHORT_DESC = 2;
  final public static int ST_IN_LONG_DESC = 4;

  /**
   * YY_LEXSTATE[l] is the state in the DFA for the lexical state l
   * YY_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private final static int YY_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  6, 7
  };

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\11\0\1\4\3\0"+
    "\1\6\1\5\20\0\1\7\1\10\1\11\1\15\1\26\1\16\1\32"+
    "\1\22\1\20\1\25\1\0\1\34\1\31\1\30\1\33\1\21\1\24"+
    "\1\0\1\14\1\12\1\13\1\17\1\35\1\36\1\27\1\23\7\0"+
    "\1\10\1\11\1\15\1\26\1\16\1\32\1\22\1\20\1\25\1\0"+
    "\1\34\1\31\1\30\1\33\1\21\1\24\1\0\1\14\1\12\1\13"+
    "\1\17\1\35\1\36\1\27\1\23\uff86\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    31,    62,    93,   124,   155,   186,   217,   248,   279, 
      310,   248,   341,   372,   403,   434,   248,   465,   496,   527, 
      558,   248,   589,   620,   651,   682,   713,   744,   775,   806, 
      837,   868,   310,   372,   248,   248,   899,   930,   434,   496, 
      527,   961,   248,   992,  1023,  1054,  1085,  1116,  1147,  1178, 
     1209,  1240,  1271,  1302,  1333,  1364,  1395,  1426,   558,   620, 
      248,  1457,   713,   744,   248,   837,  1488,  1519,  1550,  1581, 
     1612,  1643,  1674,  1705,  1736,  1767,  1798,  1829,  1860,  1891, 
     1922,  1953,  1984,  2015,  2046,  2077,  2108,  2139,  2170,  2201, 
     2232,  2263,  2294,  2325,  2356,  2387,  2418,  2449,  2480,  2511, 
     2542,  2573,  2604,  2635,  2666,  2697,  2728,  2759,  2790,  2821, 
     2852,  2883,  2914,  2945,  2976,  3007,  3038,  3069,  3100,  3131, 
     3162,  3193,  3224,  3255,  3286,  3317,  3348,  3379,  3410,  3441, 
     3472,  3503,  3534,   248,  3565,  3596,  3627,  3658,  3689,   248, 
     3720,  3751,  3782,  3813,  3844,  3875,  3906,  3937,  3968,  3999, 
     4030,  4061,  4092,  4123,  4154,  4185,  4216,  4247,  4278,  4309, 
     4340,  4371,   248,  4402,  4433,  4464,  4495,  4526,   248,  4557, 
     4588,  4619,  4650,  4681,  4712,  4743,  4774,  4805,  4836,  4867, 
     4898,  4929,  4960,  4991,  5022,  5053,  5084,  5115,  5146,  5177, 
     5208,   248,  5239,  5270,  5301,  5332,  5363,  5394,  5425,  5456, 
     5487,   248,  5518,  5549,  5580,  5611,   248,  5642,  5673,  5704, 
     5735,  5766,   248,  5797,  5828,   248,  5859,  5890,   248,  5921, 
     5952,  5983,  6014,  6045,  6076,  6107,  6138,  6169,   248,  6200, 
     6231,  6262,  6293,   248,  6324,  6355,  6386,  6417,  6448,   248, 
     6479,  6510,   248,  6541,  6572,   248,  6603,  6634,  6665,  6696, 
     6727,  6758,   248,  6789,  6820,  6851,  6882,  6913,  6944,  6975, 
      248,  7006,  7037,  7068,  7099,  7130,  7161,   248,  7192,  7223, 
     7254,  7285,  7316,  7347,   248,  7378,  7409,  7440,  7471,  7502, 
     7533,  7564,   248,  7595,  7626,  7657,  7688,  7719,  7750,   248, 
     7781,  7812,   248,   248,  7843,  7874,  7905,   248,   248,  7936, 
     7967,  7998,   248,  8029,   248,  8060,  8091,  8122,  8153,  8184, 
     8215,   248,   248,  8246,  8277,  8308,   248,   248,  8339,  8370, 
     8401,   248,  8432,   248,  8463,  8494,  8525,  8556,  8587,  8618, 
     8649,  8680,  8711,  8742,  8773,   248,   248,  8804,  8835,   248, 
     8866,   248,  8897,  8928,  8959,  8990,  9021,  9052,   248,   248, 
     9083,  9114,   248,  9145,   248,   248,  9176,  9207,   248,   248, 
     9238,   248,  9269,  9300,   248,  9331,  9362,   248,   248,  9393, 
      248,  9424,  9455,   248,  9486,   248,  9517,  9548,   248,  9579, 
      248,  9610,  9641,   248,   248,   248,   248,   248,   248
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\44\11\1\12\32\11\1\13\1\14\1\15\1\16\1\11"+
    "\1\17\31\11\1\20\1\21\1\22\1\23\1\11\1\17"+
    "\1\24\30\11\1\25\1\26\1\27\1\30\33\11\1\31"+
    "\1\26\1\27\1\32\2\11\1\24\30\11\1\33\1\26"+
    "\1\27\1\34\33\11\1\35\1\26\1\27\1\36\2\11"+
    "\1\37\27\11\43\0\1\40\33\0\1\41\2\0\1\42"+
    "\1\0\1\43\32\0\1\14\41\0\1\44\32\0\1\45"+
    "\1\43\1\46\34\0\1\47\1\21\1\22\1\50\1\0"+
    "\1\43\1\51\31\0\1\21\35\0\1\52\1\21\1\22"+
    "\1\0\1\53\1\0\1\51\37\0\1\54\1\0\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\2\0\1\63\1\0"+
    "\1\64\1\65\1\66\2\0\1\67\1\70\1\71\1\0"+
    "\1\72\2\0\1\73\2\0\1\74\34\0\1\26\41\0"+
    "\1\75\32\0\1\31\2\0\1\32\2\0\1\51\30\0"+
    "\1\76\3\0\1\75\1\0\1\51\30\0\1\77\2\0"+
    "\1\100\37\0\1\101\32\0\1\35\2\0\1\36\2\0"+
    "\1\102\30\0\1\103\3\0\1\101\1\0\1\102\37\0"+
    "\1\104\1\0\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\2\0\1\113\1\0\1\114\1\115\1\116\2\0\1\117"+
    "\1\120\1\121\1\0\1\122\5\0\1\123\33\0\1\45"+
    "\37\0\1\43\35\0\1\52\1\21\1\22\3\0\1\51"+
    "\40\0\1\124\3\0\1\125\1\0\1\126\32\0\1\127"+
    "\2\0\1\130\1\131\5\0\1\132\30\0\1\133\1\134"+
    "\1\135\33\0\1\136\30\0\1\137\10\0\1\140\44\0"+
    "\1\141\21\0\1\142\55\0\1\143\15\0\1\144\50\0"+
    "\1\145\10\0\1\146\21\0\1\147\45\0\1\150\36\0"+
    "\1\151\21\0\1\152\36\0\1\153\5\0\1\154\21\0"+
    "\1\76\5\0\1\51\30\0\1\103\5\0\1\102\40\0"+
    "\1\155\3\0\1\156\1\0\1\157\32\0\1\160\2\0"+
    "\1\161\1\162\5\0\1\163\30\0\1\164\1\165\1\166"+
    "\33\0\1\167\30\0\1\170\10\0\1\171\44\0\1\172"+
    "\21\0\1\173\55\0\1\174\15\0\1\175\50\0\1\176"+
    "\10\0\1\177\21\0\1\200\45\0\1\201\36\0\1\202"+
    "\21\0\1\203\36\0\1\204\5\0\1\205\21\0\1\123"+
    "\1\206\1\207\45\0\1\210\41\0\1\211\34\0\1\212"+
    "\33\0\1\213\44\0\1\214\31\0\1\215\60\0\1\216"+
    "\16\0\1\217\37\0\1\220\50\0\1\221\23\0\1\222"+
    "\36\0\1\223\47\0\1\224\22\0\1\225\44\0\1\226"+
    "\41\0\1\227\31\0\1\230\1\231\54\0\1\232\16\0"+
    "\1\233\35\0\1\234\11\0\1\235\27\0\1\236\15\0"+
    "\1\237\34\0\1\240\1\0\1\241\33\0\1\242\22\0"+
    "\1\243\36\0\1\244\34\0\1\245\41\0\1\246\34\0"+
    "\1\247\33\0\1\250\44\0\1\251\31\0\1\252\60\0"+
    "\1\253\16\0\1\254\37\0\1\255\50\0\1\256\23\0"+
    "\1\257\36\0\1\260\47\0\1\261\22\0\1\262\44\0"+
    "\1\263\41\0\1\264\31\0\1\265\1\266\54\0\1\267"+
    "\16\0\1\270\35\0\1\271\11\0\1\272\27\0\1\273"+
    "\15\0\1\274\34\0\1\275\1\0\1\276\33\0\1\277"+
    "\22\0\1\300\36\0\1\301\24\0\1\206\47\0\1\302"+
    "\41\0\1\303\40\0\1\304\31\0\1\305\47\0\1\306"+
    "\27\0\1\307\42\0\1\310\36\0\1\311\36\0\1\312"+
    "\34\0\1\313\35\0\1\314\43\0\1\315\43\0\1\316"+
    "\20\0\1\317\35\0\1\320\35\0\1\321\62\0\1\322"+
    "\23\0\1\323\33\0\1\324\35\0\1\325\35\0\1\326"+
    "\40\0\1\327\54\0\1\330\20\0\1\331\30\0\1\332"+
    "\44\0\1\333\32\0\1\334\37\0\1\335\41\0\1\336"+
    "\40\0\1\337\31\0\1\340\47\0\1\341\27\0\1\342"+
    "\42\0\1\343\36\0\1\344\36\0\1\345\34\0\1\346"+
    "\35\0\1\347\43\0\1\350\43\0\1\351\20\0\1\352"+
    "\35\0\1\353\35\0\1\354\62\0\1\355\23\0\1\356"+
    "\33\0\1\357\35\0\1\360\35\0\1\361\40\0\1\362"+
    "\54\0\1\363\20\0\1\364\30\0\1\365\44\0\1\366"+
    "\32\0\1\367\40\0\1\370\34\0\1\371\45\0\1\372"+
    "\42\0\1\373\21\0\1\374\44\0\1\375\34\0\1\376"+
    "\60\0\1\377\14\0\1\u0100\44\0\1\u0101\30\0\1\u0102"+
    "\46\0\1\u0103\22\0\1\u0104\56\0\1\u0105\16\0\1\u0106"+
    "\42\0\1\u0107\36\0\1\u0108\40\0\1\u0109\53\0\1\u010a"+
    "\15\0\1\u010b\55\0\1\u010c\32\0\1\u010d\25\0\1\u010e"+
    "\34\0\1\u010f\45\0\1\u0110\42\0\1\u0111\21\0\1\u0112"+
    "\44\0\1\u0113\34\0\1\u0114\60\0\1\u0115\14\0\1\u0116"+
    "\44\0\1\u0117\30\0\1\u0118\46\0\1\u0119\22\0\1\u011a"+
    "\56\0\1\u011b\16\0\1\u011c\42\0\1\u011d\36\0\1\u011e"+
    "\40\0\1\u011f\53\0\1\u0120\15\0\1\u0121\55\0\1\u0122"+
    "\32\0\1\u0123\21\0\1\u0124\40\0\1\u0125\40\0\1\u0126"+
    "\37\0\1\u0127\36\0\1\u0128\46\0\1\u0129\23\0\1\u012a"+
    "\57\0\1\u012b\24\0\1\u012c\42\0\1\u012d\42\0\1\u012e"+
    "\36\0\1\u012f\27\0\1\u0130\32\0\1\u0131\53\0\1\u0132"+
    "\20\0\1\u0133\33\0\1\u0134\45\0\1\u0135\36\0\1\u0136"+
    "\25\0\1\u0137\40\0\1\u0138\40\0\1\u0139\37\0\1\u013a"+
    "\36\0\1\u013b\46\0\1\u013c\23\0\1\u013d\57\0\1\u013e"+
    "\24\0\1\u013f\42\0\1\u0140\42\0\1\u0141\36\0\1\u0142"+
    "\27\0\1\u0143\32\0\1\u0144\53\0\1\u0145\20\0\1\u0146"+
    "\33\0\1\u0147\45\0\1\u0148\36\0\1\u0149\32\0\1\u014a"+
    "\56\0\1\u014b\35\0\1\u014c\12\0\1\u014d\42\0\1\u014e"+
    "\44\0\1\u014f\32\0\1\u0150\36\0\1\u0151\30\0\1\u0152"+
    "\36\0\1\u0153\44\0\1\u0154\37\0\1\u0155\52\0\1\u0156"+
    "\20\0\1\u0157\56\0\1\u0158\35\0\1\u0159\12\0\1\u015a"+
    "\42\0\1\u015b\44\0\1\u015c\32\0\1\u015d\36\0\1\u015e"+
    "\30\0\1\u015f\36\0\1\u0160\44\0\1\u0161\37\0\1\u0162"+
    "\52\0\1\u0163\16\0\1\u0164\33\0\1\u0165\36\0\1\u0166"+
    "\57\0\1\u0167\30\0\1\u0168\33\0\1\u0169\47\0\1\u016a"+
    "\20\0\1\u016b\37\0\1\u016c\35\0\1\u016d\33\0\1\u016e"+
    "\36\0\1\u016f\57\0\1\u0170\30\0\1\u0171\33\0\1\u0172"+
    "\47\0\1\u0173\20\0\1\u0174\37\0\1\u0175\36\0\1\u0176"+
    "\44\0\1\u0177\27\0\1\u0178\41\0\1\u0179\35\0\1\u017a"+
    "\35\0\1\u017b\44\0\1\u017c\27\0\1\u017d\41\0\1\u017e"+
    "\35\0\1\u017f\37\0\1\u0180\46\0\1\u0181\26\0\1\u0182"+
    "\36\0\1\u0183\46\0\1\u0184\26\0\1\u0185\20\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_NO_MATCH = 2;


  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  1,  0,  1,  0,  1,  9,  1,  1,  9,  1,  1,  1,  1, 
     9,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  0,  9,  9,  1,  1,  1,  1,  0,  1,  9,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  1,  0,  0, 
     9,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  1,  0,  0,  0,  0,  9,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  9,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  9,  0, 
     0,  0,  0,  0,  9,  0,  0,  9,  0,  0,  9,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9, 
     0,  0,  9,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0, 
     0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0, 
     0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0, 
     0,  9,  0,  0,  9,  9,  1,  0,  0,  9,  9,  0,  0,  0,  9,  0, 
     9,  0,  0,  0,  0,  0,  0,  9,  9,  1,  0,  0,  9,  9,  0,  0, 
     0,  9,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 
     9,  0,  0,  9,  0,  9,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0, 
     9,  0,  9,  9,  0,  0,  9,  9,  0,  9,  0,  0,  9,  0,  0,  9, 
     9,  0,  9,  0,  0,  9,  0,  9,  0,  0,  9,  0,  9,  0,  0,  9, 
     9,  9,  9,  9,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  
  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    private String shortDesc = null;
    private String longDesc = null;
    private ArrayList tagList = null;
    private int currTagId = 0;
    private StringBuffer sBuffer = null;
    private int numOfLines = 0;
    private int startPos = 0;

    public PHPDocBlock parse (String comment){

        longDesc = "";
        tagList = new ArrayList();
        sBuffer = new StringBuffer();
        numOfLines = 1;

        //start parsing
        while ( !yy_atEOF )
            try {
                next_token();
            } catch (IOException e) {
                e.printStackTrace();
            }

        BasicPHPDocTag[] tags = new BasicPHPDocTag[tagList.size()];
        tagList.toArray(tags);

        PHPDocBlockImp rv = new PHPDocBlockImp(shortDesc, longDesc, tags, 0);
        rv.setContent(comment);
        return rv;

    }

    private void startTagsState(String firstState){
        updateStartPos();
        hendleDesc();
        currTagId = BasicPHPDocTag.getID(firstState);
        sBuffer = new StringBuffer();
        yybegin(ST_IN_TAGS);
    }

    private void setNewTag(String newTag){
       updateStartPos();
       setTagValue();

       sBuffer = new StringBuffer();
       currTagId = BasicPHPDocTag.getID(newTag);
    }

    private void setTagValue(){
        String value = sBuffer.toString().trim();
        // special case for backward compatibility
        if (currTagId == BasicPHPDocTag.DESC) {
            shortDesc = shortDesc + value;
            return;
        }

        BasicPHPDocTag basicPHPDocTag = new BasicPHPDocTag(currTagId,value);
        tagList.add(basicPHPDocTag);
    }

    private void appendText()
	{
		int length = yy_markedPos - startPos;
		if (length < 0)
		{
			length = yy_markedPos;
			sBuffer.append(yy_buffer, 0, length);
		}
		else
		{
			sBuffer.append(yy_buffer, startPos, length);
		}
		updateStartPos();
	}

    private void hendleDesc() {
        if(yy_lexical_state == ST_IN_SHORT_DESC){
            shortDesc = sBuffer.toString().trim();
        }
        else{
            longDesc = sBuffer.toString().trim();
        }

        sBuffer = new StringBuffer();
    }

    private void startLongDescState() {
        hendleDesc();
        updateStartPos();
        yybegin(ST_IN_LONG_DESC);
    }

    private void hendleNewLine() {
        appendText();
        if(numOfLines==4){
            int firstLineEnd = sBuffer.indexOf("\n",1);
            if (firstLineEnd==-1){
            	firstLineEnd= sBuffer.indexOf("\r",1);
            }
            if (firstLineEnd==-1){
            	firstLineEnd=sBuffer.length()-1;
            }
            shortDesc = sBuffer.substring(0,firstLineEnd);
            shortDesc = shortDesc.trim();
            sBuffer.delete(0,firstLineEnd);
            yybegin(ST_IN_LONG_DESC);
        }
        else{
          numOfLines++;
        }
    }

    private void appendLastText(){
       sBuffer.append(yy_buffer, startPos, yy_markedPos-startPos-2);
       updateStartPos();
    }

    int maxNumberofLines = 4;

    private void handleDocEnd_shortDesc() {
        appendLastText();
        if(numOfLines==maxNumberofLines){
            int firstLineEnd = sBuffer.indexOf("\n",1);
            shortDesc = sBuffer.substring(0,firstLineEnd);
            shortDesc = shortDesc.trim();
            sBuffer.delete(0,firstLineEnd);
            longDesc = sBuffer.toString().trim();
        }
        else{
            shortDesc = sBuffer.toString().trim();
        }
    }

    private void handleDocEnd_longDesc() {
       appendLastText();
       longDesc = sBuffer.toString().trim();
    }

    private void handleDocEnd_inTags() {
        appendLastText();
        setTagValue();
    }


    private void updateStartPos(){
        startPos = yy_markedPos;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DocumentorLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DocumentorLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[9672];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline =  0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


 


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public int next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      if (yy_markedPos_l > yy_startRead) {
        switch (yy_buffer_l[yy_markedPos_l-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yy_atBOL = true;
          break;
        case '\r': 
          if (yy_markedPos_l < yy_endRead_l)
            yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          else if (yy_atEOF)
            yy_atBOL = false;
          else {
            boolean eof = yy_refill();
            yy_markedPos_l = yy_markedPos;
            yy_buffer_l = yy_buffer;
            if (eof) 
              yy_atBOL = false;
            else 
              yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          }
          break;
        default:
          yy_atBOL = false;
        }
      }
      yy_action = -1;

      yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      if (yy_atBOL)
        yy_state = YY_LEXSTATE[yy_lexical_state+1];
      else
        yy_state = YY_LEXSTATE[yy_lexical_state];


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 21: 
        case 22: 
          { appendText(); }
        case 390: break;
        case 385: 
          { startTagsState("filesource"); }
        case 391: break;
        case 289: 
          { setNewTag("final"); }
        case 392: break;
        case 282: 
          { setNewTag("param"); }
        case 393: break;
        case 274: 
          { setNewTag("since"); }
        case 394: break;
        case 245: 
          { setNewTag("name"); }
        case 395: break;
        case 242: 
          { setNewTag("link"); }
        case 396: break;
        case 239: 
          { setNewTag("desc"); }
        case 397: break;
        case 233: 
          { setNewTag("uses"); }
        case 398: break;
        case 228: 
          { setNewTag("todo"); }
        case 399: break;
        case 373: 
          { startTagsState("staticvar"); }
        case 400: break;
        case 375: 
          { startTagsState("copyright"); }
        case 401: break;
        case 383: 
          { startTagsState("subpackage"); }
        case 402: break;
        case 384: 
          { startTagsState("deprecated"); }
        case 403: break;
        case 311: 
          { setNewTag("access"); }
        case 404: break;
        case 312: 
          { setNewTag("author"); }
        case 405: break;
        case 313: 
          { setNewTag("static"); }
        case 406: break;
        case 316: 
          { setNewTag("throws"); }
        case 407: break;
        case 317: 
          { setNewTag("return"); }
        case 408: break;
        case 321: 
          { setNewTag("global"); }
        case 409: break;
        case 323: 
          { setNewTag("ignore"); }
        case 410: break;
        case 348: 
          { setNewTag("example"); }
        case 411: break;
        case 349: 
          { setNewTag("package"); }
        case 412: break;
        case 352: 
          { setNewTag("license"); }
        case 413: break;
        case 354: 
          { setNewTag("version"); }
        case 414: break;
        case 34: 
        case 36: 
        case 37: 
          { 
    appendText();
    startLongDescState();
 }
        case 415: break;
        case 35: 
          { 
    maxNumberofLines = 4;
    handleDocEnd_shortDesc();
 }
        case 416: break;
        case 42: 
          { 
    maxNumberofLines = 5;
    handleDocEnd_shortDesc();
 }
        case 417: break;
        case 82: 
          { 
        updateStartPos();
        yybegin(ST_IN_SHORT_DESC);
     }
        case 418: break;
        case 133: 
        case 134: 
          { 
        updateStartPos();
        yybegin(ST_IN_SHORT_DESC);
     }
        case 419: break;
        case 386: 
          { setNewTag("subpackage"); }
        case 420: break;
        case 267: 
          { startTagsState("final"); }
        case 421: break;
        case 260: 
          { startTagsState("param"); }
        case 422: break;
        case 252: 
          { startTagsState("since"); }
        case 423: break;
        case 292: 
          { startTagsState("access"); }
        case 424: break;
        case 293: 
          { startTagsState("author"); }
        case 425: break;
        case 294: 
          { startTagsState("static"); }
        case 426: break;
        case 297: 
          { startTagsState("throws"); }
        case 427: break;
        case 298: 
          { startTagsState("return"); }
        case 428: break;
        case 302: 
          { startTagsState("global"); }
        case 429: break;
        case 304: 
          { startTagsState("ignore"); }
        case 430: break;
        case 367: 
          { setNewTag("tutorial"); }
        case 431: break;
        case 378: 
          { setNewTag("staticvar"); }
        case 432: break;
        case 11: 
        case 12: 
          { hendleNewLine(); }
        case 433: break;
        case 388: 
          { setNewTag("filesource"); }
        case 434: break;
        case 370: 
          { setNewTag("internal"); }
        case 435: break;
        case 191: 
          { setNewTag("var"); }
        case 436: break;
        case 168: 
          { setNewTag("see"); }
        case 437: break;
        case 387: 
          { setNewTag("deprecated"); }
        case 438: break;
        case 16: 
        case 17: 
          { startLongDescState(); }
        case 439: break;
        case 335: 
          { startTagsState("example"); }
        case 440: break;
        case 336: 
          { startTagsState("package"); }
        case 441: break;
        case 339: 
          { startTagsState("license"); }
        case 442: break;
        case 341: 
          { startTagsState("version"); }
        case 443: break;
        case 355: 
          { startTagsState("abstract"); }
        case 444: break;
        case 358: 
          { startTagsState("tutorial"); }
        case 445: break;
        case 359: 
          { startTagsState("category"); }
        case 446: break;
        case 361: 
          { startTagsState("internal"); }
        case 447: break;
        case 3: 
        case 5: 
        case 7: 
        case 24: 
        case 25: 
        case 28: 
        case 29: 
        case 38: 
        case 39: 
        case 41: 
        case 61: 
        case 66: 
          { updateStartPos(); }
        case 448: break;
        case 368: 
          { setNewTag("category"); }
        case 449: break;
        case 380: 
          { setNewTag("copyright"); }
        case 450: break;
        case 218: 
          { startTagsState("name"); }
        case 451: break;
        case 215: 
          { startTagsState("link"); }
        case 452: break;
        case 212: 
          { startTagsState("desc"); }
        case 453: break;
        case 206: 
          { startTagsState("uses"); }
        case 454: break;
        case 201: 
          { startTagsState("todo"); }
        case 455: break;
        case 139: 
          { startTagsState("see"); }
        case 456: break;
        case 162: 
          { startTagsState("var"); }
        case 457: break;
        case 364: 
          { setNewTag("abstract"); }
        case 458: break;
        case 64: 
          { handleDocEnd_inTags(); }
        case 459: break;
        case 60: 
          { handleDocEnd_longDesc(); }
        case 460: break;
        case 26: 
        case 27: 
        case 30: 
          {  }
        case 461: break;
        case 20: 
        case 23: 
          {  }
        case 462: break;
        case 10: 
        case 13: 
        case 14: 
        case 15: 
        case 18: 
        case 19: 
          {  }
        case 463: break;
        case 8: 
        case 9: 
          {  }
        case 464: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
            return YYEOF;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, i.e. it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java DocumentorLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        DocumentorLexer scanner = null;
        try {
          scanner = new DocumentorLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.yy_atEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
