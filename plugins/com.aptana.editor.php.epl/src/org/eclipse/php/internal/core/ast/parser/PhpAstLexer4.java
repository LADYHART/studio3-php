/* The following code was generated by JFlex 1.3.5 on 12/2/07 1:47 PM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.eclipse.php.internal.core.ast.parser;

import org.eclipse.php.internal.core.phpModel.javacup.runtime.Symbol;
import org.eclipse.php.internal.core.phpModel.javacup.sym;
import org.eclipse.php.internal.core.phpModel.parser.StateStack;
import org.eclipse.php.internal.core.ast.nodes.Comment;
import java.io.IOException;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 12/2/07 1:47 PM from the specification file
 * <tt>file:/C:/development/PDT/parserUtils/parser/php4/ast_scanner.flex</tt>
 */
public class PhpAstLexer4 implements org.eclipse.php.internal.core.ast.parser.AstLexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int ST_DOCBLOCK = 18;
  final public static int ST_IN_SCRIPTING = 2;
  final public static int ST_LOOKING_FOR_PROPERTY = 12;
  final public static int ST_SINGLE_QUOTE = 6;
  final public static int ST_ONE_LINE_COMMENT = 20;
  final public static int ST_COMMENT = 16;
  final public static int ST_BACKQUOTE = 8;
  final public static int ST_DOUBLE_QUOTES = 4;
  final public static int YYINITIAL = 0;
  final public static int ST_HEREDOC = 10;
  final public static int ST_LOOKING_FOR_VARNAME = 14;

  /**
   * YY_LEXSTATE[l] is the state in the DFA for the lexical state l
   * YY_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private final static int YY_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\12\1\14\2\0\1\11\22\0\1\12\1\52\1\75\1\13"+
    "\1\67\1\56\1\57\1\76\1\42\1\44\1\54\1\4\1\63\1\36"+
    "\1\2\1\55\1\5\7\101\2\1\1\40\1\62\1\53\1\51\1\37"+
    "\1\70\1\71\1\33\1\7\1\26\1\17\1\3\1\23\1\43\1\32"+
    "\1\15\1\46\1\34\1\21\1\50\1\25\1\20\1\35\1\47\1\30"+
    "\1\27\1\16\1\24\1\41\1\31\1\6\1\45\1\10\1\64\1\77"+
    "\1\65\1\61\1\22\1\100\1\33\1\7\1\26\1\17\1\3\1\23"+
    "\1\43\1\32\1\15\1\46\1\34\1\21\1\50\1\25\1\20\1\35"+
    "\1\47\1\30\1\74\1\16\1\24\1\41\1\31\1\6\1\45\1\10"+
    "\1\72\1\60\1\73\1\66\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    66,   132,   198,   264,   330,   396,   462,   528,   594, 
      660,   726,   792,   858,   924,   990,  1056,  1122,  1188,  1254, 
     1320,  1386,  1452,  1518,   924,  1584,  1650,  1716,  1782,  1848, 
     1914,  1980,  2046,  2112,  2178,  2244,  2310,  2376,  2442,  2508, 
     2574,  2640,  2706,  2772,  2838,   924,  2904,  2970,  3036,  3102, 
     3168,  3234,  3300,  3366,  3432,   924,   924,   924,   924,   924, 
     3498,  3564,   924,   924,   924,  3630,  3696,   924,  3762,  3828, 
     3894,  3960,  4026,  4092,   924,   924,  4158,  4224,  4290,   924, 
     4356,  4422,  4488,   924,  4554,  4620,  4686,  4752,   924,  4818, 
      924,  4884,  4950,  5016,   924,  5082,  5148,  5214,  5280,   924, 
      924,  5346,  5412,  5478,  5544,  5610,  5676,  5742,   924,  5808, 
     5874,  5940,  6006,  6072,  6138,   924,   924,  6204,  6270,  6336, 
     1452,  6402,  6468,  6534,  6600,  1452,  6666,  1452,  6732,  6798, 
     6864,  6930,  6996,  7062,  7128,  7194,  7260,  7326,  7392,  7458, 
     7524,  7590,  7656,  7722,  1452,  7788,  7854,   924,   924,   924, 
     7920,   924,   924,  7986,  8052,  2772,  8118,  8184,  8250,  8316, 
     8382,  8448,  8514,  8580,  8646,   924,  8712,  8778,   924,   924, 
     8844,  8910,   924,   924,  8976,  9042,   924,   924,   924,   924, 
      924,   924,  9108,  9174,  3630,   924,  9240,  3696,  9306,  9372, 
     3828,   924,   924,   924,   924,  9438,  9504,   924,  9570,  9636, 
      924,  9702,   924,   924,   924,   924,  9768,  9834,  9900,  9900, 
     9966, 10032, 10098, 10164, 10230, 10296, 10362,  6204,  1452, 10428, 
    10494, 10560, 10626, 10692,  1452, 10758, 10824, 10890, 10956, 11022, 
    11088, 11154, 11220,  1452,  1452, 11286, 11352, 11418, 11484, 11550, 
    11616, 11682, 11748,  1452, 11814, 11880,   924,  1452, 11946, 12012, 
    12078, 12144, 12210, 12276, 12342, 12408, 12474, 12540,   924,   924, 
      924, 12606, 12672, 12738, 12804, 12870, 12936,   924, 13002,   924, 
     9372, 13068, 13134, 13200, 13266, 13332, 13398, 13464, 13530, 13596, 
    13662, 13728,  1452,  1452, 13794, 13860, 13926, 13992, 14058, 14124, 
    14190, 14256,  1452, 14322, 14388, 14454, 14520, 14586, 14652, 14718, 
    14784, 14850, 14916,  1452, 14982, 15048, 15114, 15180, 15246, 15312, 
    15378, 15444, 15510, 15576, 15642, 15708, 15774, 15840, 15906, 15972, 
    16038, 16104, 16170,   924, 16236, 16302, 16368, 16434, 16500,  1452, 
    16566, 16632, 16698, 16764,  1452,  1452, 16830,  1452, 16896, 16962, 
    17028, 17094, 17160, 17226, 17292, 17358, 17424, 17490,  1452, 17556, 
     1452,  1452, 17622, 17688, 17754, 17820,  1452,  1452,  1452, 17886, 
    17952, 18018,   924, 18084, 18150, 18216, 18282, 18348, 18414, 18480, 
    18546, 18612,   924, 18678, 18744, 18810,   924, 18876, 18942,  1452, 
    19008, 19074, 19140, 19206, 19272,  1452, 19338, 19404, 19470, 19536, 
    19602, 19668, 19734, 19800, 19866, 19932,  1452,  1452,  1452, 19998, 
    20064, 20130,   924, 20196, 20262, 20328, 20394, 20460,   924, 20526, 
     1452, 20592, 20658, 20724,  1452, 20790, 20856, 20922, 20988, 21054, 
     1452,  1452, 21120, 21186, 21252, 21318, 21384,  1452, 21450, 21516, 
    21582, 21648, 21714, 21780,   924, 21846,   924, 21912, 21978, 22044, 
    22110, 22176, 22242,  1452, 22308, 22374,  1452,  1452, 22440, 22506, 
     1452,  1452, 22572,   924,   924, 22638, 22704, 22770, 22836, 22902, 
    22968,  1452, 23034, 23100, 23166,  1452, 23232, 23298, 23364,  1452, 
     1452, 23430, 23496, 23562, 23628, 23694, 23760, 23826, 23892, 23958, 
    24024, 24090, 24156, 24222,  1452,  1452,  1452,  1452,   924, 24288, 
    24354, 24420, 24486, 24552, 24618, 24684, 24750, 24816, 24882, 24948, 
    25014, 25080, 25146,   924, 25212, 25278
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\53\15\1\16\26\15\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\30\1\31\1\30\1\32"+
    "\1\27\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\27\1\46\1\27\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\4\27"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\43\1\102\1\103\1\17\1\104"+
    "\1\20\1\17\1\105\1\106\1\27\1\106\1\107\3\27"+
    "\4\106\21\27\1\110\2\106\1\27\1\106\1\27\1\106"+
    "\4\27\13\106\1\72\1\73\1\106\1\111\2\106\1\112"+
    "\1\113\1\27\1\114\1\106\1\115\1\116\1\105\76\117"+
    "\1\120\1\121\2\117\1\17\1\105\1\106\1\27\1\106"+
    "\1\107\3\27\4\106\21\27\1\110\2\106\1\27\1\106"+
    "\1\27\1\106\4\27\13\106\1\72\1\73\1\106\1\111"+
    "\2\106\1\112\1\113\1\27\1\122\1\106\1\123\1\124"+
    "\1\105\1\17\1\105\1\106\1\27\1\106\1\107\3\27"+
    "\4\106\21\27\1\110\2\106\1\27\1\106\1\27\1\106"+
    "\4\27\13\106\1\72\1\73\1\106\1\111\2\106\1\112"+
    "\1\113\1\27\1\125\1\126\1\127\1\125\1\105\1\17"+
    "\1\105\1\106\1\130\1\106\1\107\3\130\4\106\21\130"+
    "\1\110\2\106\1\130\1\106\1\130\1\106\4\130\13\106"+
    "\1\72\1\73\1\106\1\111\2\106\1\112\1\113\1\130"+
    "\1\125\1\126\1\127\1\125\1\105\3\131\1\132\2\131"+
    "\3\132\4\131\21\132\3\131\1\132\1\131\1\132\1\131"+
    "\4\132\23\131\1\132\5\131\3\133\1\134\2\133\3\134"+
    "\4\133\21\134\3\133\1\134\1\133\1\134\1\133\4\134"+
    "\23\133\1\134\5\133\54\135\1\136\25\135\11\137\1\140"+
    "\42\137\1\141\25\137\11\142\1\143\2\142\1\144\22\142"+
    "\1\145\16\142\1\146\11\142\1\146\11\142\53\15\1\147"+
    "\101\15\1\0\2\15\1\150\11\15\1\151\3\15\1\152"+
    "\5\15\103\0\1\20\1\153\1\154\1\0\1\20\73\0"+
    "\1\20\1\0\1\153\3\0\1\153\43\0\1\155\27\0"+
    "\1\153\1\0\1\27\1\0\1\27\1\0\1\27\1\156"+
    "\2\27\4\0\4\27\1\157\3\27\1\160\1\161\7\27"+
    "\3\0\1\162\1\0\1\27\1\0\3\27\1\163\23\0"+
    "\1\27\4\0\1\27\4\0\1\164\44\0\1\165\31\0"+
    "\1\20\1\153\1\154\1\0\1\20\1\166\72\0\1\20"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\3\27"+
    "\1\167\15\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\13\27\1\170\5\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\21\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\27"+
    "\4\0\1\27\11\0\2\30\1\0\1\30\66\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\6\27\1\171\1\27"+
    "\1\172\1\27\1\173\6\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\173\4\0\1\27\1\0\1\27"+
    "\1\0\1\174\1\0\4\27\4\0\1\175\2\27\1\176"+
    "\15\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\4\27\1\177\6\27\1\200\5\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\201\20\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\5\27\1\202\13\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\3\27"+
    "\1\203\3\27\1\204\11\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\10\27\1\205\1\27"+
    "\1\206\6\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\206\4\0\1\27\1\0\1\27\1\0\1\207"+
    "\1\0\4\27\4\0\21\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\3\27\1\210\1\211"+
    "\1\27\1\212\7\27\1\213\2\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\27\1\214"+
    "\12\27\1\215\4\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\216\1\0\4\27\4\0\21\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\15\27\1\217"+
    "\3\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\10\27\1\220\1\27\1\221\1\222\5\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\221"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\13\27\1\223\5\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\36\0\1\224"+
    "\1\225\11\0\1\226\67\0\1\227\11\0\1\230\70\0"+
    "\1\231\42\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\16\27\1\232\2\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\7\0\1\233\2\0"+
    "\1\234\2\0\1\235\1\0\1\236\1\237\2\0\1\240"+
    "\1\241\2\0\1\242\1\243\2\0\1\244\40\0\1\242"+
    "\6\0\1\27\1\0\1\27\1\0\4\27\4\0\4\27"+
    "\1\245\14\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\37\0\1\246\11\0\1\247"+
    "\101\0\1\250\67\0\1\251\11\0\1\252\1\0\1\253"+
    "\1\0\1\254\75\0\1\255\101\0\1\256\2\0\1\257"+
    "\1\31\63\0\1\260\11\0\1\261\101\0\1\262\5\0"+
    "\1\263\73\0\1\264\6\0\1\265\72\0\1\266\33\0"+
    "\1\267\2\0\3\267\4\0\21\267\3\0\1\267\1\0"+
    "\1\267\1\0\4\267\23\0\1\267\44\0\1\270\42\0"+
    "\67\271\1\0\5\271\1\272\1\271\1\273\2\271\76\274"+
    "\1\272\1\275\2\274\1\0\1\105\3\0\1\105\73\0"+
    "\1\105\2\0\1\106\1\0\1\106\4\0\4\106\21\0"+
    "\3\106\1\0\1\106\1\0\1\106\4\0\13\106\2\0"+
    "\1\106\1\0\2\106\4\0\1\106\4\0\1\105\3\0"+
    "\1\105\1\276\72\0\1\105\2\0\1\106\1\0\1\106"+
    "\4\0\4\106\21\0\1\106\1\277\1\106\1\0\1\106"+
    "\1\0\1\106\4\0\13\106\2\0\1\106\1\0\2\106"+
    "\4\0\1\106\3\0\3\300\1\267\2\300\3\267\4\300"+
    "\21\267\3\300\1\267\1\300\1\267\1\300\4\267\21\300"+
    "\1\301\1\300\1\267\5\300\67\0\1\302\12\0\5\303"+
    "\1\304\1\305\66\303\1\306\3\303\1\304\100\0\1\116"+
    "\1\0\76\117\1\0\1\307\100\117\2\306\2\117\75\0"+
    "\1\122\4\0\5\303\1\304\1\305\71\303\1\306\1\304"+
    "\75\0\2\125\1\0\1\125\3\0\1\106\1\0\1\106"+
    "\4\0\4\106\21\0\3\106\1\0\1\106\1\0\1\106"+
    "\4\0\13\106\2\0\1\106\1\0\2\106\3\0\1\125"+
    "\1\126\1\0\1\125\1\0\5\303\1\304\1\305\72\303"+
    "\1\304\1\0\1\130\1\0\1\130\1\0\4\130\1\310"+
    "\2\0\1\311\21\130\3\0\1\130\1\0\1\130\1\0"+
    "\4\130\11\0\1\312\11\0\1\130\4\0\1\130\1\0"+
    "\1\132\1\0\1\132\1\0\4\132\4\0\21\132\3\0"+
    "\1\132\1\0\1\132\1\0\4\132\23\0\1\132\4\0"+
    "\1\132\1\0\1\134\1\0\1\134\1\0\4\134\4\0"+
    "\21\134\3\0\1\134\1\0\1\134\1\0\4\134\23\0"+
    "\1\134\4\0\1\134\54\135\1\0\25\135\55\0\1\313"+
    "\40\0\1\137\142\0\1\314\24\0\11\142\1\143\2\142"+
    "\1\144\22\142\1\144\16\142\1\144\11\142\1\144\11\142"+
    "\14\0\1\144\124\0\1\315\42\0\53\15\1\0\2\15"+
    "\1\0\11\15\1\0\3\15\1\0\5\15\51\0\1\316"+
    "\65\0\1\317\13\0\1\316\56\0\1\320\54\0\1\153"+
    "\1\0\1\154\1\0\1\153\73\0\1\153\1\0\1\321"+
    "\2\0\1\322\1\321\30\0\1\322\42\0\1\321\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\323\1\324"+
    "\17\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\12\27\1\325\6\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\325\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\2\27\1\326"+
    "\16\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\15\27\1\327\3\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\16\27\1\330"+
    "\2\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\20\27\1\331\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\332"+
    "\1\0\1\332\1\0\1\332\1\0\1\332\7\0\1\332"+
    "\3\0\1\332\2\0\1\332\4\0\1\332\45\0\1\332"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\13\27"+
    "\1\333\5\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\334"+
    "\1\0\4\27\4\0\21\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\11\27\1\335\7\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\12\27\1\336\6\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\336\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\6\27\1\337\2\27"+
    "\1\340\7\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\341"+
    "\1\0\4\27\4\0\21\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\2\27\1\342\16\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\12\27\1\343\6\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\343\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\4\27\1\344\1\27"+
    "\1\345\2\27\1\346\7\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\13\27\1\347\5\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\10\27\1\350\10\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\12\27\1\351\6\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\351"+
    "\4\0\1\27\1\0\1\27\1\0\1\352\1\0\4\27"+
    "\4\0\21\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\14\27\1\353\4\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\10\27"+
    "\1\354\10\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\16\27\1\355\2\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\7\27"+
    "\1\204\11\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\12\27\1\356\6\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\356\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\16\27"+
    "\1\357\2\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\360\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\27\1\361"+
    "\17\27\3\0\1\27\1\0\1\27\1\0\2\27\1\362"+
    "\1\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\363\20\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\2\27"+
    "\1\364\16\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\13\27\1\365\5\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\1\366"+
    "\20\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\51\0\1\367\31\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\13\27\1\370\5\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\20\0\1\371\106\0\1\372\74\0\1\373\70\0"+
    "\1\374\113\0\1\375\105\0\1\376\72\0\1\377\66\0"+
    "\1\u0100\126\0\1\u0101\52\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\3\27\1\u0102\15\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\51\0"+
    "\1\u0103\101\0\1\u0104\101\0\1\u0105\1\0\1\u0106\55\0"+
    "\1\u0107\44\0\1\u0107\16\0\2\u0108\1\0\1\u0108\37\0"+
    "\1\u0109\14\0\1\u010a\21\0\1\u010b\2\0\1\u010c\66\0"+
    "\1\267\1\0\1\267\1\0\4\267\4\0\21\267\3\0"+
    "\1\267\1\0\1\267\1\0\4\267\23\0\1\267\4\0"+
    "\1\267\11\0\1\u010d\2\0\1\u010e\65\0\14\271\1\0"+
    "\65\271\14\274\1\0\65\274\1\0\1\u010f\1\0\1\u010f"+
    "\1\0\1\u010f\1\0\1\u010f\7\0\1\u010f\3\0\1\u010f"+
    "\2\0\1\u010f\4\0\1\u010f\45\0\1\u010f\5\0\1\u0110"+
    "\73\0\1\u0110\1\0\1\u0111\1\0\1\u0111\1\0\1\u0111"+
    "\1\0\1\u0111\7\0\1\u0111\3\0\1\u0111\2\0\1\u0111"+
    "\4\0\1\u0111\45\0\1\u0111\76\117\2\0\2\117\14\0"+
    "\1\311\76\0\1\310\2\0\1\311\117\0\1\u0112\77\0"+
    "\1\u0113\52\0\1\321\3\0\1\321\73\0\1\321\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\27\1\341"+
    "\17\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\u0114\1\0"+
    "\4\27\4\0\21\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\u0115\1\0\4\27\4\0\21\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\u0116\1\27"+
    "\1\u0117\3\27\1\u0118\3\27\1\u0119\1\27\1\u011a\4\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\u0119"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\3\27\1\u011b\15\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\4\27\1\u011c\14\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\1\27\1\u011d\17\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\16\27\1\u011e\2\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\4\27\1\u011f\14\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\u0120\1\0\4\27\4\0\21\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\1\u0121"+
    "\15\27\1\u0122\2\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\4\27\1\u0123\14\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\5\27\1\u0124\13\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\27\1\u0125\17\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\u0126\20\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\u0127\6\27\1\u0128\11\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\4\27\1\u0129\14\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\u012a\1\0\4\27\4\0\21\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\11\27\1\u012b"+
    "\7\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\u012c\1\0"+
    "\4\27\4\0\21\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\27\1\u012d\10\27\1\u012e"+
    "\6\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\u012e\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\12\27\1\u012f\6\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\u012f\4\0\1\27\1\0"+
    "\1\27\1\0\1\u0130\1\0\4\27\4\0\21\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\27\1\u0131\17\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\27\1\u0132\17\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\7\27\1\u0133\11\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\7\27\1\u0134\11\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\4\27\1\u0135\14\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\16\27\1\u0136\2\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\10\27\1\u0137\10\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\20\0\1\u0138\77\0"+
    "\1\u0139\107\0\1\u013a\123\0\1\u013b\53\0\1\u013c\110\0"+
    "\1\u013d\44\0\1\u013d\35\0\1\u013e\104\0\1\u013f\76\0"+
    "\1\u0140\52\0\1\27\1\0\1\27\1\0\2\27\1\u0141"+
    "\1\27\4\0\21\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\3\0\1\u0142\2\0"+
    "\3\u0142\1\0\1\u0106\2\0\21\u0142\3\0\1\u0142\1\0"+
    "\1\u0142\1\0\4\u0142\23\0\1\u0142\33\0\1\u0143\64\0"+
    "\2\u0108\1\0\1\u0108\54\0\1\u010a\65\0\1\u0144\65\0"+
    "\1\u0145\54\0\1\u010c\101\0\1\u010e\72\0\1\306\73\0"+
    "\1\306\1\0\1\306\1\0\1\306\1\0\1\306\1\0"+
    "\1\306\7\0\1\306\3\0\1\306\2\0\1\306\4\0"+
    "\1\306\45\0\1\306\35\0\1\u0146\61\0\1\u0147\65\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\10\27\1\u0148"+
    "\10\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\u0149\20\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\6\27\1\u014a\12\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\u014b\1\0\4\27"+
    "\4\0\21\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\3\27\1\u014c\15\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\14\27"+
    "\1\u014d\4\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\15\27\1\u014e\3\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\21\27"+
    "\3\0\1\27\1\0\1\27\1\0\1\u014f\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\17\27\1\u0150\1\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\7\27\1\u0151"+
    "\11\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\u0152\17\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\10\27\1\u0153"+
    "\10\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\7\27\1\u0154\11\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\16\27\1\u0155"+
    "\2\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\6\27\1\u0156\12\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\10\27\1\u0157"+
    "\10\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\4\27\1\u0158\14\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\10\27\1\u0159"+
    "\10\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\16\27\1\u015a\2\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\16\27\1\u015b"+
    "\2\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\u015c\17\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\27\1\u015d"+
    "\17\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\u015e\20\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\27\1\u015f\17\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\12\27\1\u0160\6\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\u0160\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\u0161\20\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\11\27\1\u0162\7\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\13\27\1\u0163\5\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\u0164\20\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\u0165"+
    "\1\0\4\27\4\0\21\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\21\27\3\0\1\27"+
    "\1\0\1\27\1\0\1\u0166\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\27\1\u0167\17\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\21\0\1\u0168\63\0"+
    "\1\u0169\6\0\1\u016a\31\0\1\u016b\44\0\1\u016c\75\0"+
    "\1\u016d\131\0\1\u016e\51\0\1\u016f\113\0\1\u0170\105\0"+
    "\1\u0171\113\0\1\u0172\47\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\16\27\1\u0173\2\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\u0142\1\0\1\u0142\1\0\4\u0142\1\u0174\2\0\1\u0175"+
    "\21\u0142\3\0\1\u0142\1\0\1\u0142\1\0\4\u0142\23\0"+
    "\1\u0142\4\0\1\u0142\30\0\1\u0176\104\0\1\u0177\57\0"+
    "\1\u0178\1\u0179\1\0\1\u0179\122\0\1\u017a\45\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\2\27\1\u017b\16\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\6\27\1\u017c\12\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\11\27\1\u017d\7\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\13\27\1\u017e\5\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\u017f\20\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\u0180\20\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\2\27\1\u0181\16\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\u0182\1\0\4\27\4\0\21\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\4\27\1\u0183\14\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\13\27\1\u0184\5\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\7\27\1\u0185\11\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\u0186\1\0\4\27\4\0\21\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\u0187\1\0\4\27\4\0\21\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\11\27\1\u0188\7\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\12\27\1\u0189\6\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\u0189"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\11\27\1\u018a\7\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\u018b\20\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\10\27\1\u018c\10\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\11\27\1\u018d\7\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\15\27\1\u018e\3\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\10\27\1\u018f\10\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\13\27\1\u0190\5\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\3\0\1\u0191\6\0"+
    "\1\u0192\31\0\1\u0193\100\0\1\u0194\50\0\1\u016a\31\0"+
    "\1\u016b\56\0\1\u0195\106\0\1\u0196\71\0\1\u0171\101\0"+
    "\1\u0197\110\0\1\u0198\66\0\1\u0171\31\0\1\u0199\102\0"+
    "\1\u019a\35\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\4\27\1\u019b\14\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\14\0\1\u0175\102\0"+
    "\1\u019c\114\0\1\u019d\65\0\1\u0179\103\0\1\u019e\64\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\12\27\1\u019f"+
    "\6\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\u019f\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\4\27\1\u01a0\14\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u01a1\1\0\4\27\4\0\21\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\27\1\u01a2\17\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\4\27\1\u01a3\14\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\u01a4\1\0\4\27\4\0"+
    "\21\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\u01a5\17\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u01a6\1\0\4\27\4\0\21\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\10\27\1\u01a7\10\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\5\27\1\u01a8\13\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\5\27\1\u01a9\13\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\27\1\u01aa\17\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\12\27\1\u01ab\6\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\u01ab\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\15\27\1\u01ac\3\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\3\27\1\u01ad\15\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\7\27\1\u01ae\11\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\u01af\1\0\4\27\4\0"+
    "\21\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\33\0\1\u01b0\60\0\1\u0192\31\0"+
    "\1\u0193\40\0\1\u01b1\101\0\1\u0171\114\0\1\u01b2\75\0"+
    "\1\u0197\31\0\1\u01b3\100\0\1\u01b4\50\0\1\u019a\31\0"+
    "\1\u01b5\72\0\1\u01b6\55\0\2\u01b7\1\0\1\u01b7\76\0"+
    "\2\u01b8\1\0\1\u01b8\66\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\16\27\1\u01b9\2\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\16\27\1\u01ba"+
    "\2\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\11\27\1\u01bb\7\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u01bc\1\0\4\27\4\0\21\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\5\27\1\u01bd\13\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\11\27\1\u01be\7\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\5\27\1\u01bf\13\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\5\27\1\u01c0\13\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\u01c1\20\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\5\27\1\u01c2\13\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\10\27"+
    "\1\u01c3\10\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\u01c4"+
    "\1\0\4\27\4\0\21\27\3\0\1\27\1\0\1\27"+
    "\1\0\4\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\5\27\1\u01c5\13\27"+
    "\3\0\1\27\1\0\1\27\1\0\4\27\23\0\1\27"+
    "\4\0\1\27\25\0\1\u0192\104\0\1\u016a\63\0\1\u01b2"+
    "\31\0\1\u01c6\47\0\1\u01b4\31\0\1\u01c7\53\0\1\u01c8"+
    "\66\0\1\u01c9\2\0\3\u01c9\2\u01b7\1\0\1\u01b7\21\u01c9"+
    "\3\0\1\u01c9\1\0\1\u01c9\1\0\4\u01c9\16\0\1\u01ca"+
    "\4\0\1\u01c9\16\0\2\u01b8\1\0\1\u01b8\4\0\1\u01cb"+
    "\61\0\1\27\1\0\1\27\1\0\4\27\4\0\13\27"+
    "\1\u01cc\5\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\11\27\1\u01cd\7\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\15\27"+
    "\1\u01ce\3\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\3\27\1\u01cf\15\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\1\27"+
    "\1\u01d0\17\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\3\27\1\u01d1\15\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\5\27"+
    "\1\u01d2\13\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\3\27\1\u01d3\15\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\11\0\2\u01c8\1\0\1\u01c8\22\0\1\270\43\0\1\u01c9"+
    "\1\0\1\u01c9\1\0\4\u01c9\2\u01d4\1\0\1\u01d4\21\u01c9"+
    "\3\0\1\u01c9\1\0\1\u01c9\1\0\4\u01c9\23\0\1\u01c9"+
    "\4\0\1\u01c9\3\0\1\u01c9\2\0\3\u01c9\4\0\21\u01c9"+
    "\3\0\1\u01c9\1\0\1\u01c9\1\0\4\u01c9\23\0\1\u01c9"+
    "\40\0\1\u01d5\47\0\1\27\1\0\1\u01d6\1\0\4\27"+
    "\4\0\21\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\15\27\1\u01d7\3\27\3\0\1\27"+
    "\1\0\1\27\1\0\4\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\10\27"+
    "\1\u01d8\10\27\3\0\1\27\1\0\1\27\1\0\4\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\u01d9\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\10\27\1\u01da"+
    "\10\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\10\27\1\u01db\10\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\3\0"+
    "\1\u01dc\2\0\3\u01dc\2\u01d4\1\0\1\u01d4\21\u01dc\3\0"+
    "\1\u01dc\1\0\1\u01dc\1\0\4\u01dc\23\0\1\u01dc\32\0"+
    "\1\u01dd\55\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\11\27\1\u01de\7\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\3\27\1\u01df\15\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\5\27\1\u01e0\13\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\11\27\1\u01e1\7\27\3\0"+
    "\1\27\1\0\1\27\1\0\4\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\u01dc\1\0\1\u01dc\1\0\4\u01dc\2\u01e2"+
    "\1\0\1\u01e2\21\u01dc\3\0\1\u01dc\1\0\1\u01dc\1\0"+
    "\4\u01dc\3\0\1\u01e3\17\0\1\u01dc\4\0\1\u01dc\43\0"+
    "\1\u01e4\37\0\1\27\1\0\1\u01e5\1\0\4\27\4\0"+
    "\21\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\10\27\1\u01e6\10\27\3\0\1\27\1\0"+
    "\1\27\1\0\4\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\5\27\1\u01e7"+
    "\13\27\3\0\1\27\1\0\1\27\1\0\4\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\u01e8\1\0"+
    "\4\27\4\0\21\27\3\0\1\27\1\0\1\27\1\0"+
    "\4\27\23\0\1\27\4\0\1\27\11\0\2\u01e2\1\0"+
    "\1\u01e2\37\0\1\u01e3\102\0\1\u01e9\50\0\1\u01ea\110\0"+
    "\1\u01eb\111\0\1\u01ec\41\0\1\u01ed\107\0\2\u01ed\1\0"+
    "\1\u01ed\34\0\1\u01ee\41\0\2\u01ee\1\0\1\u01ee\20\0"+
    "\1\u01ef\37\0\1\u01f0\1\u01f1\35\0\1\u01f2\104\0\1\u01f3"+
    "\101\0\1\u01f4\101\0\1\u01f5\76\0\1\u01f6\101\0\1\u01f7"+
    "\60\0\2\u01f5\1\0\1\u01f5\22\0\1\u01f8\77\0\1\u01f9"+
    "\101\0\1\u01fa\141\0\1\u01f5\102\0\1\u01f5\3\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  1,  1,  9,  9, 
     9,  1,  1,  9,  1,  1,  1,  1,  1,  1,  9,  9,  1,  1,  1,  9, 
     1,  1,  1,  9,  1,  1,  1,  1,  9,  1,  9,  1,  1,  1,  9,  1, 
     1,  1,  1,  9,  9,  1,  0,  1,  1,  1,  1,  0,  9,  1,  1,  1, 
     1,  1,  1,  9,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  9,  9,  1,  9,  9,  1,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  1,  9,  1,  1,  9,  9,  1,  0,  9,  9,  1,  1, 
     9,  9,  9,  9,  9,  9,  1,  1,  0,  9,  0,  0,  0,  0,  1,  9, 
     9,  9,  9,  1,  1,  9,  0,  1,  9,  0,  9,  9,  9,  9,  0,  0, 
     1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  9,  1,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  1,  9,  9,  9,  0,  0,  0,  1,  0,  1,  9,  1,  9,  1,  1, 
     1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0,  0,  9,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  9,  0,  0,  0,  0,  0, 
     0,  0,  1,  1,  9,  0,  0,  1,  9,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  9,  0,  0,  0,  0,  0,  9,  0,  1,  0,  0,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  0,  9,  0,  9,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  9,  0,  0,  0,  0,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  1, 
     1,  0,  0,  0,  1,  1,  1,  1,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	private final List commentList = new LinkedList();
	private String heredoc = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private StateStack stack = new StateStack();
    private char yy_old_buffer[] = new char[YY_BUFFERSIZE];
    private int yy_old_pushbackPos;
    private int commentStartPosition;

	public void resetCommentList() {
		commentList.clear();
	}
	
	public List getCommentList() {
		return commentList;
	}
	
	private void addComment(int type) {
		int leftPosition = getTokenStartPosition();
		Comment comment = new Comment(commentStartPosition, leftPosition + getTokenLength(), type);
		commentList.add(comment);
	}	

	public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
		asp_tags = useAspTagsAsPhp;
	}
	
    private void pushState(int state) {
        stack.pushStack(yy_lexical_state);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }

    private int getTokenStartPosition() {
        return yy_startRead - yy_pushbackPos;
    }

    private int getTokenLength() {
        return yy_markedPos - yy_startRead;
    }

    public int getLength() {
        return yy_endRead - yy_pushbackPos;
    }
    
	private void handleCommentStart() {
		commentStartPosition = getTokenStartPosition();
	}
	
	private void handleLineCommentEnd() {
         addComment(Comment.TYPE_SINGLE_LINE);
    }

    private void handleMultilineCommentEnd() {
    	addComment(Comment.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
		addComment(Comment.TYPE_PHPDOC);
    }
    
    private void handleVarComment() {
    	commentStartPosition = yy_startRead;
    	addComment(Comment.TYPE_MULTILINE);
    }

    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        return new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpAstLexer4(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpAstLexer4(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[25344];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public org.eclipse.php.internal.core.phpModel.javacup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      if (yy_markedPos_l > yy_startRead) {
        switch (yy_buffer_l[yy_markedPos_l-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yy_atBOL = true;
          break;
        case '\r': 
          if (yy_markedPos_l < yy_endRead_l)
            yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          else if (yy_atEOF)
            yy_atBOL = false;
          else {
            boolean eof = yy_refill();
            yy_markedPos_l = yy_markedPos;
            yy_buffer_l = yy_buffer;
            if (eof) 
              yy_atBOL = false;
            else 
              yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          }
          break;
        default:
          yy_atBOL = false;
        }
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      if (yy_atBOL)
        yy_state = YY_LEXSTATE[yy_lexical_state+1];
      else
        yy_state = YY_LEXSTATE[yy_lexical_state];


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 72: 
          { return createSymbol(ParserConstants4.T_DOLLAR); }
        case 507: break;
        case 49: 
          { return createSymbol(ParserConstants4.T_TIMES); }
        case 508: break;
        case 46: 
          { return createSymbol(ParserConstants4.T_EQUAL); }
        case 509: break;
        case 39: 
          { return createSymbol(ParserConstants4.T_MINUS); }
        case 510: break;
        case 16: 
          { return createSymbol(ParserConstants4.T_NEKUDA); }
        case 511: break;
        case 56: 
          { return createSymbol(ParserConstants4.T_COMMA); }
        case 512: break;
        case 59: 
          { return createSymbol(ParserConstants4.T_TILDA); }
        case 513: break;
        case 60: 
          { return createSymbol(ParserConstants4.T_DOLLAR); }
        case 514: break;
        case 47: 
          { return createSymbol(ParserConstants4.T_NOT); }
        case 515: break;
        case 41: 
          { return createSymbol(ParserConstants4.T_NEKUDOTAIM); }
        case 516: break;
        case 18: 
          { return createSymbol(ParserConstants4.T_PLUS); }
        case 517: break;
        case 50: 
          { return createSymbol(ParserConstants4.T_DIV); }
        case 518: break;
        case 52: 
          { return createSymbol(ParserConstants4.T_REFERENCE); }
        case 519: break;
        case 54: 
          { return createSymbol(ParserConstants4.T_KOVA); }
        case 520: break;
        case 55: 
          { return createSymbol(ParserConstants4.T_SEMICOLON); }
        case 521: break;
        case 57: 
          { return createSymbol(ParserConstants4.T_OPEN_RECT); }
        case 522: break;
        case 58: 
          { return createSymbol(ParserConstants4.T_CLOSE_RECT); }
        case 523: break;
        case 61: 
          { return createSymbol(ParserConstants4.T_QUESTION_MARK); }
        case 524: break;
        case 45: 
          { return createSymbol(ParserConstants4.T_CLOSE_PARENTHESE); }
        case 525: break;
        case 43: 
          { return createSymbol(ParserConstants4.T_OPEN_PARENTHESE); }
        case 526: break;
        case 48: 
          { return createSymbol(ParserConstants4.T_RGREATER); }
        case 527: break;
        case 40: 
          { return createSymbol(ParserConstants4.T_LGREATER); }
        case 528: break;
        case 51: 
          { return createSymbol(ParserConstants4.T_PRECENT); }
        case 529: break;
        case 53: 
          { return createSymbol(ParserConstants4.T_OR); }
        case 530: break;
        case 62: 
          { return createSymbol(ParserConstants4.T_AT); }
        case 531: break;
        case 74: 
          { return createSymbol(ParserConstants4.T_CURLY_CLOSE);  }
        case 532: break;
        case 73: 
          { return createSymbol(ParserConstants4.T_CURLY_OPEN);  }
        case 533: break;
        case 191: 
          { 
    if (yylength() == 2) {
        yypushback(1);
    }
    return createSymbol(ParserConstants4.T_CHARACTER);
 }
        case 534: break;
        case 485: 
          {    
	return createSymbol(ParserConstants4.T_OLD_FUNCTION);
 }
        case 535: break;
        case 91: 
          { 
    popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ParserConstants4.T_STRING_VARNAME);
 }
        case 536: break;
        case 84: 
          { 
    return createSymbol(ParserConstants4.T_ENCAPSED_AND_WHITESPACE);
 }
        case 537: break;
        case 81: 
          { 
    return createSymbol(ParserConstants4.T_ENCAPSED_AND_WHITESPACE);
 }
        case 538: break;
        case 78: 
          { 
    return createSymbol(ParserConstants4.T_ENCAPSED_AND_WHITESPACE);
 }
        case 539: break;
        case 77: 
          { 
    return createSymbol(ParserConstants4.T_ENCAPSED_AND_WHITESPACE);
 }
        case 540: break;
        case 152: 
          { 
	return createSymbol(ParserConstants4.T_PAAMAYIM_NEKUDOTAYIM);
 }
        case 541: break;
        case 430: 
          { 
	return createSymbol(ParserConstants4.T_REQUIRE);
 }
        case 542: break;
        case 427: 
          { 
	return createSymbol(ParserConstants4.T_FOREACH);
 }
        case 543: break;
        case 421: 
          { 
	return createSymbol(ParserConstants4.T_DECLARE);
 }
        case 544: break;
        case 420: 
          { 
	return createSymbol(ParserConstants4.T_DEFAULT);
 }
        case 545: break;
        case 419: 
          { 
	return createSymbol(ParserConstants4.T_INCLUDE);
 }
        case 546: break;
        case 414: 
          { 
	return createSymbol(ParserConstants4.T_EXTENDS);
 }
        case 547: break;
        case 410: 
          { 
	return createSymbol(ParserConstants4.T_GLOBAL);
 }
        case 548: break;
        case 151: 
          { 
	return createSymbol(ParserConstants4.T_IS_GREATER_OR_EQUAL);
 }
        case 549: break;
        case 169: 
          { 
	return createSymbol(ParserConstants4.T_IS_SMALLER_OR_EQUAL);
 }
        case 550: break;
        case 195: 
        case 271: 
          { 
    return createSymbol(ParserConstants4.T_CHARACTER);
 }
        case 551: break;
        case 197: 
          { 
    return createSymbol(ParserConstants4.T_CHARACTER);
 }
        case 552: break;
        case 272: 
          { 
    return createSymbol(ParserConstants4.T_CHARACTER);
 }
        case 553: break;
        case 379: 
          { 
	return createSymbol(ParserConstants4.T_ELSEIF);
 }
        case 554: break;
        case 381: 
          { 
	return createSymbol(ParserConstants4.T_ENDFOR);
 }
        case 555: break;
        case 396: 
          { 
	return createSymbol(ParserConstants4.T_STATIC);
 }
        case 556: break;
        case 397: 
          { 
	return createSymbol(ParserConstants4.T_SWITCH);
 }
        case 557: break;
        case 398: 
          { 
	return createSymbol(ParserConstants4.T_RETURN);
 }
        case 558: break;
        case 470: 
          { 
	return createSymbol(ParserConstants4.T_ENDFOREACH);
 }
        case 559: break;
        case 469: 
          { 
	return createSymbol(ParserConstants4.T_ENDDECLARE);
 }
        case 560: break;
        case 465: 
          { 
    return createSymbol(ParserConstants4.T_CLASS_C);
 }
        case 561: break;
        case 454: 
          { 
	return createSymbol(ParserConstants4.T_STRING_CAST);
 }
        case 562: break;
        case 453: 
          { 
	return createSymbol(ParserConstants4.T_OBJECT_CAST);
 }
        case 563: break;
        case 436: 
          { 
	return createSymbol(ParserConstants4.T_ARRAY_CAST);
 }
        case 564: break;
        case 434: 
          { 
	return createSymbol(ParserConstants4.T_UNSET_CAST);
 }
        case 565: break;
        case 408: 
          { 
	return createSymbol(ParserConstants4.T_DOUBLE_CAST);
 }
        case 566: break;
        case 149: 
          { 
	return createSymbol(ParserConstants4.T_MINUS_EQUAL);
 }
        case 567: break;
        case 127: 
          { 
	return createSymbol(ParserConstants4.T_LOGICAL_OR);
 }
        case 568: break;
        case 116: 
          { 
	return createSymbol(ParserConstants4.T_PLUS_EQUAL);
 }
        case 569: break;
        case 63: 
          { 
    pushState(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants4.T_CURLY_OPEN);

 }
        case 570: break;
        case 178: 
          { 
	return createSymbol(ParserConstants4.T_BOOLEAN_AND);
 }
        case 571: break;
        case 180: 
          { 
	return createSymbol(ParserConstants4.T_BOOLEAN_OR);
 }
        case 572: break;
        case 218: 
          { 
	return createSymbol(ParserConstants4.T_LOGICAL_XOR);
 }
        case 573: break;
        case 243: 
          { 
	return createSymbol(ParserConstants4.T_LOGICAL_AND);
 }
        case 574: break;
        case 276: 
          { 
	return createSymbol(ParserConstants4.T_ELSE);
 }
        case 575: break;
        case 282: 
          { 
	return createSymbol(ParserConstants4.T_ECHO);
 }
        case 576: break;
        case 283: 
          { 
	return createSymbol(ParserConstants4.T_EVAL);
 }
        case 577: break;
        case 292: 
          { 
	return createSymbol(ParserConstants4.T_LIST);
 }
        case 578: break;
        case 303: 
          { 
	return createSymbol(ParserConstants4.T_CASE);
 }
        case 579: break;
        case 329: 
          { 
	return createSymbol(ParserConstants4.T_ENDIF);
 }
        case 580: break;
        case 334: 
          { 
	return createSymbol(ParserConstants4.T_EMPTY);
 }
        case 581: break;
        case 335: 
          { 
	return createSymbol(ParserConstants4.T_BREAK);
 }
        case 582: break;
        case 337: 
          { 
	return createSymbol(ParserConstants4.T_ISSET);
 }
        case 583: break;
        case 348: 
          { 
	return createSymbol(ParserConstants4.T_UNSET);
 }
        case 584: break;
        case 350: 
          { 
	return createSymbol(ParserConstants4.T_CONST);
 }
        case 585: break;
        case 351: 
          { 
	return createSymbol(ParserConstants4.T_CLASS);
 }
        case 586: break;
        case 356: 
          { 
	return createSymbol(ParserConstants4.T_WHILE);
 }
        case 587: break;
        case 357: 
          { 
	return createSymbol(ParserConstants4.T_ARRAY);
 }
        case 588: break;
        case 358: 
          { 
	return createSymbol(ParserConstants4.T_PRINT);
 }
        case 589: break;
        case 100: 
        case 101: 
          { 
//	yymore();
 }
        case 590: break;
        case 93: 
          { 
//	yymore();
 }
        case 591: break;
        case 148: 
        case 190: 
          { 
    pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ParserConstants4.T_OBJECT_OPERATOR);
 }
        case 592: break;
        case 75: 
          { 
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants4.T_QUATE);
 }
        case 593: break;
        case 69: 
        case 71: 
        case 85: 
          { 
    return createFullSymbol(ParserConstants4.T_ENCAPSED_AND_WHITESPACE);
 }
        case 594: break;
        case 14: 
        case 76: 
        case 80: 
        case 82: 
        case 86: 
          { 
	// do nothing
 }
        case 595: break;
        case 65: 
          { 
    yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ParserConstants4.T_QUATE);
 }
        case 596: break;
        case 183: 
        case 268: 
        case 269: 
          { 
    yybegin(YYINITIAL);
    return createSymbol(ParserConstants4.T_SEMICOLON);  /* implicit ';' at php-end tag */
 }
        case 597: break;
        case 185: 
          { 
    return createFullSymbol(ParserConstants4.T_CONSTANT_ENCAPSED_STRING);
 }
        case 598: break;
        case 259: 
          { 
	return createSymbol(ParserConstants4.T_IS_NOT_IDENTICAL);
 }
        case 599: break;
        case 89: 
          { 
    popState();
    return createFullSymbol(ParserConstants4.T_STRING);
 }
        case 600: break;
        case 64: 
          { 
	/* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    return createSymbol(ParserConstants4.T_CURLY_CLOSE);
 }
        case 601: break;
        case 175: 
        case 266: 
        case 267: 
          { 
    if (asp_tags) {
        yybegin(YYINITIAL);
        return createSymbol(ParserConstants4.T_SEMICOLON);  /* implicit ';' at php-end tag */
    } else {
        return createSymbol(ParserConstants4.T_INLINE_HTML);
    }
 }
        case 602: break;
        case 88: 
          { 
    yypushback(yylength());
    popState();
 }
        case 603: break;
        case 205: 
          { 
    String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG_WITH_ECHO;
    } else {
        return createSymbol(ParserConstants4.T_INLINE_HTML);
    }
 }
        case 604: break;
        case 199: 
        case 200: 
          { 
    String text = yytext();
    int length = text.length();
    text = text.trim();
    boolean foundNP = false;
    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        foundNP = true;
    }
    if (text.equals(heredoc)) {
        if (foundNP) {
            yypushback(length - text.length());
        }
        heredoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ParserConstants4.T_END_HEREDOC);
    } else {
        return createFullSymbol(ParserConstants4.T_STRING);
    }
 }
        case 605: break;
        case 461: 
          { 
	return createSymbol(ParserConstants4.T_ENDSWITCH);
 }
        case 606: break;
        case 451: 
          { 
	return createSymbol(ParserConstants4.T_CONTINUE);
 }
        case 607: break;
        case 450: 
          { 
	return createSymbol(ParserConstants4.T_FUNCTION);
 }
        case 608: break;
        case 443: 
          { 
	return createSymbol(ParserConstants4.T_ENDWHILE);
 }
        case 609: break;
        case 79: 
          { 
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants4.T_SINGLE_QUATE);
 }
        case 610: break;
        case 12: 
        case 13: 
        case 105: 
          { 
    return createSymbol(ParserConstants4.T_INLINE_HTML);
 }
        case 611: break;
        case 66: 
          { 
    yybegin(ST_SINGLE_QUOTE);
    return createSymbol(ParserConstants4.T_SINGLE_QUATE);
 }
        case 612: break;
        case 67: 
          { 
    yybegin(ST_BACKQUOTE);
    return createSymbol(ParserConstants4.T_BACKQUATE);
 }
        case 613: break;
        case 166: 
          { 
	return createSymbol(ParserConstants4.T_IS_EQUAL);
 }
        case 614: break;
        case 172: 
          { 
	return createSymbol(ParserConstants4.T_MUL_EQUAL);
 }
        case 615: break;
        case 173: 
          { 
	return createSymbol(ParserConstants4.T_DIV_EQUAL);
 }
        case 616: break;
        case 176: 
          { 
	return createSymbol(ParserConstants4.T_MOD_EQUAL);
 }
        case 617: break;
        case 177: 
          { 
	return createSymbol(ParserConstants4.T_AND_EQUAL);
 }
        case 618: break;
        case 179: 
          { 
	return createSymbol(ParserConstants4.T_OR_EQUAL);
 }
        case 619: break;
        case 181: 
          { 
	return createSymbol(ParserConstants4.T_XOR_EQUAL);
 }
        case 620: break;
        case 246: 
          { 
	return createSymbol(ParserConstants4.T_SR_EQUAL);
 }
        case 621: break;
        case 260: 
          { 
	return createSymbol(ParserConstants4.T_SL_EQUAL);
 }
        case 622: break;
        case 323: 
          { 
	handleCommentStart();
 }
        case 623: break;
        case 362: 
          { 
	return createSymbol(ParserConstants4.T_INT_CAST);
 }
        case 624: break;
        case 402: 
          { 
	return createSymbol(ParserConstants4.T_BOOL_CAST);
 }
        case 625: break;
        case 83: 
          { 
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants4.T_BACKQUATE);
 }
        case 626: break;
        case 486: 
          { 
    return createSymbol(ParserConstants4.T_FUNC_C);
 }
        case 627: break;
        case 147: 
          { 
	return createSymbol(ParserConstants4.T_DEC);
 }
        case 628: break;
        case 144: 
          { 
	return createSymbol(ParserConstants4.T_AS);
 }
        case 629: break;
        case 125: 
          { 
	return createSymbol(ParserConstants4.T_DO);
 }
        case 630: break;
        case 120: 
          { 
	return createSymbol(ParserConstants4.T_IF);
 }
        case 631: break;
        case 115: 
          { 
	return createSymbol(ParserConstants4.T_INC);
 }
        case 632: break;
        case 90: 
          { 
    yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
 }
        case 633: break;
        case 150: 
          { 
	return createSymbol(ParserConstants4.T_SR);
 }
        case 634: break;
        case 170: 
          { 
	return createSymbol(ParserConstants4.T_SL);
 }
        case 635: break;
        case 192: 
          { 
    pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ParserConstants4.T_DOLLAR_OPEN_CURLY_BRACES);
 }
        case 636: break;
        case 230: 
          { 
	return createSymbol(ParserConstants4.T_FOR);
 }
        case 637: break;
        case 233: 
          { 
	return createSymbol(ParserConstants4.T_USE);
 }
        case 638: break;
        case 234: 
          { 
	return createSymbol(ParserConstants4.T_NEW);
 }
        case 639: break;
        case 247: 
          { 
	return createSymbol(ParserConstants4.T_VAR);
 }
        case 640: break;
        case 24: 
          { 
	handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
 }
        case 641: break;
        case 447: 
          { 
    return createSymbol(ParserConstants4.T_FILE);
 }
        case 642: break;
        case 446: 
          { 
    return createSymbol(ParserConstants4.T_LINE);
 }
        case 643: break;
        case 106: 
        case 208: 
          { 
    return createFullSymbol(ParserConstants4.T_DNUMBER);
 }
        case 644: break;
        case 104: 
        case 503: 
          { 
    if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
    } else {
        return createSymbol(ParserConstants4.T_INLINE_HTML);
    }
 }
        case 645: break;
        case 15: 
        case 19: 
          { 
    return createFullSymbol(ParserConstants4.T_LNUMBER);
 }
        case 646: break;
        case 182: 
          { 
    return createFullSymbol(ParserConstants4.T_VARIABLE);
 }
        case 647: break;
        case 217: 
          { 
    return createFullSymbol(ParserConstants4.T_DNUMBER);
 }
        case 648: break;
        case 224: 
          { 
	return createFullSymbol(ParserConstants4.T_EXIT);
 }
        case 649: break;
        case 375: 
        case 376: 
          { 
    yybegin(ST_IN_SCRIPTING);
	//return T_OPEN_TAG;
 }
        case 650: break;
        case 488: 
          { 
    handleVarComment();
    return createFullSymbol(ParserConstants4.T_VAR_COMMENT);
 }
        case 651: break;
        case 487: 
          { 
	return createSymbol(ParserConstants4.T_REQUIRE_ONCE);
 }
        case 652: break;
        case 484: 
          { 
	return createSymbol(ParserConstants4.T_INCLUDE_ONCE);
 }
        case 653: break;
        case 108: 
          { 
	return createSymbol(ParserConstants4.T_CONCAT_EQUAL);
 }
        case 654: break;
        case 165: 
          { 
	return createSymbol(ParserConstants4.T_DOUBLE_ARROW);
 }
        case 655: break;
        case 167: 
        case 168: 
          { 
	return createSymbol(ParserConstants4.T_IS_NOT_EQUAL);
 }
        case 656: break;
        case 258: 
          { 
	return createSymbol(ParserConstants4.T_IS_IDENTICAL);
 }
        case 657: break;
        case 194: 
        case 196: 
          { 
    switch (yytext().charAt(1)) {
        case 'n':
            break;
        case 't':
            break;
        case 'r':
            break;
        case '\\':
            break;
        case '$':
            break;
        case '{':
            break;
        default:
            return createSymbol(ParserConstants4.T_BAD_CHARACTER);
    }
    return createSymbol(ParserConstants4.T_CHARACTER);
 }
        case 658: break;
        case 68: 
        case 70: 
        case 270: 
          {  /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(ParserConstants4.T_NUM_STRING);
 }
        case 659: break;
        case 193: 
          { 
    pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(ParserConstants4.T_CURLY_OPEN);
 }
        case 660: break;
        case 87: 
          { 
    return createFullSymbol(ParserConstants4.T_STRING);
 }
        case 661: break;
        case 17: 
        case 20: 
        case 21: 
        case 22: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 42: 
        case 44: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 118: 
        case 119: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 126: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 145: 
        case 146: 
        case 153: 
        case 164: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 231: 
        case 232: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 244: 
        case 245: 
        case 257: 
        case 275: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 320: 
        case 327: 
        case 328: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 336: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 349: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 370: 
        case 378: 
        case 380: 
        case 382: 
        case 383: 
        case 384: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 399: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 428: 
        case 429: 
        case 440: 
        case 441: 
        case 442: 
        case 444: 
        case 445: 
        case 448: 
        case 449: 
        case 452: 
        case 459: 
        case 460: 
        case 462: 
        case 463: 
        case 464: 
        case 466: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
          { 
    return createFullSymbol(ParserConstants4.T_STRING);
 }
        case 662: break;
        case 204: 
          { 
    if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
   		handleLineCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	} 
 }
        case 663: break;
        case 371: 
        case 372: 
          { 
    heredoc = yytext().substring(3).trim();    // for '<<<'
    yybegin(ST_HEREDOC);
    return createSymbol(ParserConstants4.T_START_HEREDOC);
 }
        case 664: break;
        case 103: 
          { 
    if (asp_tags) {
        yybegin(ST_IN_SCRIPTING);
		//return T_OPEN_TAG;
    } else {
        return createSymbol(ParserConstants4.T_INLINE_HTML);
    }
 }
        case 665: break;
        case 174: 
          { 
	handleCommentStart();
    yybegin(ST_COMMENT);
 }
        case 666: break;
        case 203: 
          { 
     handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
 }
        case 667: break;
        case 385: 
          { 
    /* not a keyword, hust for recognize constans.*/
    return createFullSymbol(ParserConstants4.T_DEFINE);
 }
        case 668: break;
        case 95: 
          { 
 }
        case 669: break;
        case 94: 
        case 96: 
          { 
 }
        case 670: break;
        case 92: 
          { 
 }
        case 671: break;
        case 23: 
          { 
 }
        case 672: break;
        case 202: 
          { 
	handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
 }
        case 673: break;
        case 264: 
          { 
handleCommentStart();
yybegin(ST_DOCBLOCK);
 }
        case 674: break;
        case 97: 
        case 98: 
        case 99: 
          { 
	String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			handleLineCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
 }
        case 675: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return createSymbol(sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, i.e. it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java PhpAstLexer4 <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        PhpAstLexer4 scanner = null;
        try {
          scanner = new PhpAstLexer4( new java.io.FileReader(argv[i]) );
          while ( !scanner.yy_atEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
